# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'uitestforpy.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QColor, QBrush
import main

colors = [
    QColor(255, 0, 0),     # Red
    QColor(0, 255, 0),     # Green
    QColor(0, 0, 255),     # Blue
    QColor(255, 255, 0),   # Yellow
    QColor(255, 0, 255),   # Magenta
    QColor(0, 255, 255),   # Cyan
    QColor(255, 255, 255), # White
    QColor(0, 0, 0),       # Black
    QColor(128, 128, 128), # Gray
    QColor(255, 165, 0),   # Orange
    QColor(128, 0, 128),   # Purple
    QColor(128, 128, 0),   # Olive
    QColor(0, 128, 128),   # Teal
    QColor(210, 105, 30),  # Chocolate
    QColor(222, 184, 135), # Burlywood
    QColor(205, 133, 63),  # Peru
    QColor(245, 222, 179), # Wheat
    QColor(244, 164, 96),  # Sandybrown
    QColor(255, 228, 181), # Moccasin
    QColor(255, 250, 205), # Lemonchiffon
    QColor(255, 192, 203), # Pink
    QColor(255, 182, 193), # Lightpink
    QColor(250, 128, 114), # Salmon
    QColor(255, 99, 71),   # Tomato
    QColor(139, 69, 19),   # Saddlebrown
    QColor(128, 0, 0),     # Maroon
    QColor(0, 128, 0),     # Green (dark)
    QColor(0, 0, 128),     # Navy
    QColor(123, 104, 238), # Mediumslateblue
    QColor(106, 90, 205),  # Slateblue
    QColor(72, 61, 139),   # Darkslateblue
    QColor(65, 105, 225),  # Royalblue
    QColor(30, 144, 255),  # Dodgerblue
    QColor(0, 191, 255),   # Deepskyblue
    QColor(135, 206, 235), # Skyblue
    QColor(0, 255, 127),   # Springgreen
    QColor(127, 255, 0),   # Chartreuse
    QColor(154, 205, 50),  # Yellowgreen
    QColor(50, 205, 50),   # Limegreen
    QColor(34, 139, 34),   # Forestgreen
    QColor(0, 128, 128),   # Teal (dark)
    QColor(70, 130, 180),  # Steelblue
    QColor(95, 158, 160),  # Cadetblue
    QColor(0, 255, 255),   # Cyan (bright)
    QColor(127, 255, 212), # Aquamarine
    QColor(175, 238, 238), # Paleturquoise
    QColor(72, 209, 204),  # Mediumturquoise
    QColor(0, 139, 139),   # Darkturquoise
    QColor(128, 128, 0)    # Olive (dark) 49번째(인덱스48)
]

text_colors = [
    QColor(255, 255, 255), # Red
    QColor(0, 0, 0),       # Green
    QColor(255, 255, 255), # Blue
    QColor(0, 0, 0),       # Yellow
    QColor(255, 255, 255), # Magenta
    QColor(0, 0, 0),       # Cyan
    QColor(0, 0, 0),       # White
    QColor(255, 255, 255), # Black
    QColor(0, 0, 0),       # Gray
    QColor(0, 0, 0),       # Orange
    QColor(255, 255, 255), # Purple
    QColor(255, 255, 255), # Olive
    QColor(255, 255, 255), # Teal
    QColor(255, 255, 255), # Chocolate
    QColor(0, 0, 0),       # Burlywood
    QColor(0, 0, 0),       # Peru
    QColor(0, 0, 0),       # Wheat
    QColor(0, 0, 0),       # Sandybrown
    QColor(0, 0, 0),       # Moccasin
    QColor(0, 0, 0),       # Lemonchiffon
    QColor(0, 0, 0),       # Pink
    QColor(0, 0, 0),       # Lightpink
    QColor(0, 0, 0),       # Salmon
    QColor(0, 0, 0),       # Tomato
    QColor(255, 255, 255), # Saddlebrown
    QColor(255, 255, 255), # Maroon
    QColor(255, 255, 255), # Green (dark)
    QColor(255, 255, 255), # Navy
    QColor(255, 255, 255), # Mediumslateblue
    QColor(255, 255, 255), # Slateblue
    QColor(255, 255, 255), # Darkslateblue
    QColor(255, 255, 255), # Royalblue
    QColor(255, 255, 255), # Dodgerblue
    QColor(0, 0, 0),       # Deepskyblue
    QColor(0, 0, 0),       # Skyblue
    QColor(0, 0, 0),       # Springgreen
    QColor(0, 0, 0),       # Chartreuse
    QColor(0, 0, 0),       # Yellowgreen
    QColor(255, 255, 255), # Limegreen
    QColor(255, 255, 255), # Forestgreen
    QColor(255, 255, 255), # Teal (dark)
    QColor(255, 255, 255), # Steelblue
    QColor(0, 0, 0),       # Cadetblue
    QColor(0, 0, 0),       # Cyan (bright)
    QColor(0, 0, 0),       # Aquamarine
    QColor(0, 0, 0),       # Paleturquoise
    QColor(0, 0, 0),       # Mediumturquoise
    QColor(255, 255, 255),  # Darkturquoise 
    QColor(0, 0, 0) #olive
    ]

class Ui_Dialog(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.pushButton_coreapply.clicked.connect(self.pushapply)
        self.pushButton_padd.clicked.connect(self.pushprocessadd)
        self.pushButton_podd.clicked.connect(self.pushprocessodd)
        self.pushButton_Run.clicked.connect(self.pushrun)

    def setupUi(self, Dialog): #uisetup
        Dialog.setObjectName("Dialog")
        Dialog.resize(1280, 723)
        Dialog.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(490, 60, 120, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setEnabled(True)
        self.comboBox.setGeometry(QtCore.QRect(10, 100, 240, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(12)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("background-color: rgb(227, 233, 239);\n"
"alternate-background-color: rgb(227, 233, 239);\n"
"border-color: rgb(227, 233, 239);\n"
"color: rgb(18, 67, 112);")
        self.comboBox.setEditable(False)
        self.comboBox.setIconSize(QtCore.QSize(20, 20))
        self.comboBox.setFrame(True)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(10, 0, 480, 60))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(10, 60, 120, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.pushButton_Run = QtWidgets.QPushButton(Dialog)
        self.pushButton_Run.setGeometry(QtCore.QRect(390, 100, 80, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(12)
        self.pushButton_Run.setFont(font)
        self.pushButton_Run.setStyleSheet("\n"
"background-color: rgb(227, 233, 239);")
        self.pushButton_Run.setObjectName("pushButton_Run")
        self.label_readyqueue = QtWidgets.QLabel(Dialog)
        self.label_readyqueue.setGeometry(QtCore.QRect(490, 100, 780, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(12)
        self.label_readyqueue.setFont(font)
        self.label_readyqueue.setStyleSheet("background-color: rgb(227, 233, 239);")
        self.label_readyqueue.setText("")
        self.label_readyqueue.setObjectName("label_readyqueue")
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(10, 180, 120, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(490, 180, 120, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(Dialog)
        self.label_7.setGeometry(QtCore.QRect(490, 460, 120, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(Dialog)
        self.label_8.setGeometry(QtCore.QRect(10, 460, 120, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(Dialog)
        self.label_9.setGeometry(QtCore.QRect(1000, 460, 50, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(Dialog)
        self.label_10.setGeometry(QtCore.QRect(1100, 460, 90, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(Dialog)
        self.label_11.setGeometry(QtCore.QRect(1120, 10, 160, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_usagewatt = QtWidgets.QLabel(Dialog)
        self.label_usagewatt.setGeometry(QtCore.QRect(1190, 460, 80, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_usagewatt.setFont(font)
        self.label_usagewatt.setObjectName("label_usagewatt")
        self.label_nowtime = QtWidgets.QLabel(Dialog)
        self.label_nowtime.setGeometry(QtCore.QRect(1050, 460, 50, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_nowtime.setFont(font)
        self.label_nowtime.setObjectName("label_nowtime")
        self.tableWidget_gantt = QtWidgets.QTableWidget(Dialog)
        self.tableWidget_gantt.setGeometry(QtCore.QRect(490, 220, 780, 230))
        self.tableWidget_gantt.setObjectName("tableWidget_gantt")
        self.tableWidget_gantt.setColumnCount(0)
        self.tableWidget_gantt.setRowCount(0)
        header = self.tableWidget_gantt.verticalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.pushButton_padd = QtWidgets.QPushButton(Dialog)
        self.pushButton_padd.setGeometry(QtCore.QRect(140, 460, 40, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(20)
        self.pushButton_padd.setFont(font)
        self.pushButton_padd.setStyleSheet("background-color: rgb(227, 233, 239);")
        self.pushButton_padd.setObjectName("pushButton_padd")
        self.pushButton_podd = QtWidgets.QPushButton(Dialog)
        self.pushButton_podd.setGeometry(QtCore.QRect(190, 460, 40, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(20)
        self.pushButton_podd.setFont(font)
        self.pushButton_podd.setStyleSheet("background-color: rgb(227, 233, 239);")
        self.pushButton_podd.setObjectName("pushButton_podd")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(20, 220, 60, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_12 = QtWidgets.QLabel(Dialog)
        self.label_12.setGeometry(QtCore.QRect(200, 220, 60, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.tableWidget_core = QtWidgets.QTableWidget(Dialog)
        self.tableWidget_core.setGeometry(QtCore.QRect(10, 270, 460, 180))
        self.tableWidget_core.setObjectName("tableWidget_core")
        self.tableWidget_core.setColumnCount(0)
        self.tableWidget_core.setRowCount(0)
        header = self.tableWidget_core.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        header = self.tableWidget_core.verticalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.label_13 = QtWidgets.QLabel(Dialog)
        self.label_13.setGeometry(QtCore.QRect(260, 60, 120, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(10)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.tableWidget_result = QtWidgets.QTableWidget(Dialog)
        self.tableWidget_result.setGeometry(QtCore.QRect(490, 500, 780, 200))
        self.tableWidget_result.setObjectName("tableWidget_result")
        self.tableWidget_result.setColumnCount(0)
        self.tableWidget_result.setColumnCount(7)
        item = QTableWidgetItem("PROCESS")
        self.tableWidget_result.setHorizontalHeaderItem(0, item)
        item = QTableWidgetItem("AT")
        self.tableWidget_result.setHorizontalHeaderItem(1, item)
        item = QTableWidgetItem("BT")
        self.tableWidget_result.setHorizontalHeaderItem(2, item)
        item = QTableWidgetItem("WT")
        self.tableWidget_result.setHorizontalHeaderItem(3, item)
        item = QTableWidgetItem("TT")
        self.tableWidget_result.setHorizontalHeaderItem(4, item)
        item = QTableWidgetItem("NTT")
        self.tableWidget_result.setHorizontalHeaderItem(5, item)
        item = QTableWidgetItem("DONE")
        self.tableWidget_result.setHorizontalHeaderItem(6, item)
        header = self.tableWidget_result.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(10, 500, 460, 200))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        item = QTableWidgetItem("Process")
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QTableWidgetItem("Arrival Time")
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QTableWidgetItem("Load Time")
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.tableWidget.setRowCount(0)
        header = self.tableWidget.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.textEdit_time_quantum = QtWidgets.QTextEdit(Dialog)
        self.textEdit_time_quantum.setGeometry(QtCore.QRect(260, 100, 120, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(12)
        self.textEdit_time_quantum.setFont(font)
        self.textEdit_time_quantum.setStyleSheet("background-color: rgb(227, 233, 239);")
        self.textEdit_time_quantum.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.textEdit_time_quantum.setObjectName("textEdit_time_quantum")
        self.textEdit_time_quantum.setAlignment(Qt.AlignCenter)
        self.textEdit_pcore = QtWidgets.QTextEdit(Dialog)
        self.textEdit_pcore.setGeometry(QtCore.QRect(80, 220, 100, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(12)
        self.textEdit_pcore.setFont(font)
        self.textEdit_pcore.setStyleSheet("background-color: rgb(227, 233, 239);")
        self.textEdit_pcore.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.textEdit_pcore.setObjectName("textEdit_pcore")
        self.textEdit_pcore.setAlignment(Qt.AlignCenter)
        self.pushButton_coreapply = QtWidgets.QPushButton(Dialog)
        self.pushButton_coreapply.setGeometry(QtCore.QRect(390, 220, 80, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(12)
        self.pushButton_coreapply.setFont(font)
        self.pushButton_coreapply.setStyleSheet("background-color: rgb(227, 233, 239);")
        self.pushButton_coreapply.setObjectName("pushButton_coreapply")
        self.textEdit_ecore = QtWidgets.QTextEdit(Dialog)
        self.textEdit_ecore.setGeometry(QtCore.QRect(260, 220, 100, 40))
        font = QtGui.QFont()
        font.setFamily("HY헤드라인M")
        font.setPointSize(12)
        self.textEdit_ecore.setFont(font)
        self.textEdit_ecore.setStyleSheet("background-color: rgb(227, 233, 239);")
        self.textEdit_ecore.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.textEdit_ecore.setObjectName("textEdit_ecore")
        self.textEdit_ecore.setAlignment(Qt.AlignCenter)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog): #translate ui
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label_3.setText(_translate("Dialog", "Ready Queue"))
        self.comboBox.setCurrentText(_translate("Dialog", "FCFS"))
        self.comboBox.setItemText(0, _translate("Dialog", "FCFS"))
        self.comboBox.setItemText(1, _translate("Dialog", "Round Robin"))
        self.comboBox.setItemText(2, _translate("Dialog", "SPN"))
        self.comboBox.setItemText(3, _translate("Dialog", "SRTN"))
        self.comboBox.setItemText(4, _translate("Dialog", "HRRN"))
        self.comboBox.setItemText(5, _translate("Dialog", "RPN"))
        self.label.setText(_translate("Dialog", "Process Scheduling Simulator"))
        self.label_2.setText(_translate("Dialog", "Algorithm"))
        self.pushButton_Run.setText(_translate("Dialog", "RUN"))
        self.label_5.setText(_translate("Dialog", "Processor"))
        self.label_6.setText(_translate("Dialog", "Gantt Chart"))
        self.label_7.setText(_translate("Dialog", "Result"))
        self.label_8.setText(_translate("Dialog", "Process"))
        self.label_9.setText(_translate("Dialog", "시간 :"))
        self.label_10.setText(_translate("Dialog", "소비 전력 :"))
        self.label_11.setText(_translate("Dialog", "Team : OhYes"))
        self.label_usagewatt.setText(_translate("Dialog", "watt"))
        self.label_nowtime.setText(_translate("Dialog", "time"))
        self.pushButton_padd.setText(_translate("Dialog", "+"))
        self.pushButton_podd.setText(_translate("Dialog", "-"))
        self.label_4.setText(_translate("Dialog", "P-CORE"))
        self.label_12.setText(_translate("Dialog", "E-CORE"))
        self.label_13.setText(_translate("Dialog", "Time Quantum"))
        self.pushButton_coreapply.setText(_translate("Dialog", "APPLY"))

    '''def pushapply(self):
        loop = QEventLoop()
        QTimer.singleShot(1000, loop.quit) # msec
        loop.exec_()
        self.pushapplydelay()'''
    def stop(self):
        QApplication.quit()

    def pushapply(self): #core apply 버튼을 누를 시 입력된 값에 맞게 tablewidget, tablewidget_gantt 변경하는 함수
        global pcore, ecore
        pcore, ecore = 0, 0
        self.tableWidget_core.clear()
        self.count = 0
        self.textp = self.textEdit_pcore.toPlainText()
        if self.textp == '':
            self.textp = 0
        self.textp = int(self.textp)
        self.texte = self.textEdit_ecore.toPlainText()
        if self.texte == '':
            self.texte = 0
        self.texte = int(self.texte)
        self.tableWidget_core.setRowCount(self.textp+self.texte)
        self.tableWidget_gantt.setRowCount(self.textp+self.texte)
        self.tableWidget_core.setColumnCount(2)
        self.tableWidget_gantt.setColumnCount(1)
        itemhorizon = QTableWidgetItem("CORE NUM")
        self.tableWidget_core.setHorizontalHeaderItem(0,itemhorizon) 
        itemhorizon = QTableWidgetItem("코어 종류")
        self.tableWidget_core.setHorizontalHeaderItem(1,itemhorizon) 
        itemhorizon = QTableWidgetItem("CORE NUM")
        self.tableWidget_gantt.setHorizontalHeaderItem(0,itemhorizon)
        for i in range(self.textp):
            item = QTableWidgetItem("core"+str(i+1))
            item.setTextAlignment(Qt.AlignCenter)
            itemp = QTableWidgetItem("PCORE")
            itemp.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_core.setItem(self.count,0, item)
            self.tableWidget_core.setItem(i,1,itemp)
            item = QTableWidgetItem("core"+str(i+1))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_gantt.setItem(self.count,0, item)
            self.count += 1
            pcore += 1
        for i in range(self.textp,self.textp+self.texte):
            item = QTableWidgetItem("core"+str(i+1))
            item.setTextAlignment(Qt.AlignCenter)
            iteme = QTableWidgetItem("ECORE")
            iteme.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_core.setItem(self.count,0, item)
            self.tableWidget_core.setItem(i,1,iteme)
            item = QTableWidgetItem("core"+str(i+1))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_gantt.setItem(self.count,0, item)
            self.count += 1
            ecore += 1

    def delay(self, n): #delay 함수. n=msec단위
        loop = QEventLoop()
        QTimer.singleShot(n, loop.quit) # msec
        loop.exec_()

    def initprocess(self): #이거 안씀.
        self.tableWidget.setColumnCount(6)
        item = QTableWidgetItem("AT")
        self.tableWidget_result.setHorizontalHeaderItem(0, item)
        item = QTableWidgetItem("BT")
        self.tableWidget_result.setHorizontalHeaderItem(1, item)
        item = QTableWidgetItem("WT")
        self.tableWidget_result.setHorizontalHeaderItem(2, item)
        item = QTableWidgetItem("TT")
        self.tableWidget_result.setHorizontalHeaderItem(3, item)
        item = QTableWidgetItem("NTT")
        self.tableWidget_result.setHorizontalHeaderItem(4, item)
        item = QTableWidgetItem("DONE")
        self.tableWidget_result.setHorizontalHeaderItem(5, item)

    def pushprocessadd(self): # + 버튼 클릭시 이벤트 담당
        global processnum
        self.tableWidget.setRowCount(processnum+1)
        self.tableWidget_result.setRowCount(processnum+1)
        item = QTableWidgetItem("P"+str(processnum+1))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget.setItem(processnum,0,item)
        item = QTableWidgetItem(str(processnum+1))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget.setItem(processnum,1,item)
        item = QTableWidgetItem(str(processnum+1))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget.setItem(processnum,2,item)
        header = self.tableWidget.horizontalHeader()
        header.resizeSection(processnum,100)
        item = QTableWidgetItem("P"+str(processnum+1))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_result.setItem(processnum,0, item)
        processnum += 1

    def pushprocessodd(self): # - 버튼 클릭시 이벤트 담당
        global processnum
        if processnum > 0:
            processnum -= 1
        self.tableWidget.setRowCount(processnum)
        self.tableWidget_result.setRowCount(processnum)

    def choosecolor(self, n):
        index = n % 49
        return (colors[index], text_colors[index])

    def pushrun(self): # run 버튼 클릭시 이벤트
        global processnum
        selected_algo = self.comboBox.currentIndex()
        if selected_algo == 0:
            core = pcore + ecore
            generate = main.generateProcessor(core,pcore,ecore)
            inputInfo = (processnum, generate)
            arrivaltime = []
            workload = []
            for i in range(processnum):
                arrivaltime.append(int(self.tableWidget.item(i,1).text()))
                workload.append(int(self.tableWidget.item(i,2).text()))
            output = main.FCFS(inputInfo,arrivaltime,workload)
            burstTime, waitingTime, turnaroundTime, normalizedTT, consumedPower, result = output
            print(result)
            header = self.tableWidget_gantt.horizontalHeader()
            for j in range(len(result)):
                self.delay(100)
                item = QTableWidgetItem(str(j))
                self.tableWidget_gantt.setColumnCount(j+2)
                header.resizeSection(j+1,40)
                self.tableWidget_gantt.setHorizontalHeaderItem(j+1,item)
                header.resizeSection(0,100)
                for f1 in range(len(result[j][7])):
                    if int(result[j][7][f1][1]) != -1:
                        item = QTableWidgetItem("P"+str(result[j][7][f1][1]+1))
                        item.setTextAlignment(Qt.AlignCenter)
                        #item.setForeground(QColor(255,255,255))
                        color, textcolor = self.choosecolor(result[j][7][f1][1])
                        item.setForeground(textcolor)
                        item.setBackground(color)
                        self.tableWidget_gantt.setItem(f1,j+1,item)
                self.tableWidget_gantt.horizontalScrollBar().setMaximum(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.tableWidget_gantt.horizontalScrollBar().setValue(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.label_nowtime.setText(str(j))
                self.label_usagewatt.setText(str(result[j][3]))
                #self.tableWidget_gantt.setItemDelegate
                for i in range(len(result[j][6])):
                    result[j][6][i] += 1
                self.label_readyqueue.setText(str(result[j][6]))
                for i in range(processnum):
                    item = QTableWidgetItem(str(result[j][0][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,1,item)
                    item = QTableWidgetItem(str(result[j][1][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,2,item)
                    item = QTableWidgetItem(str(result[j][2][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,3,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(turnaroundTime[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,4,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(normalizedTT[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,5,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem("DONE")
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,6,item)
        elif selected_algo == 1:
            core = pcore + ecore
            generate = main.generateProcessor(core,pcore,ecore)
            inputInfo = (processnum, generate)
            timequantum = self.textEdit_time_quantum.toPlainText()
            arrivaltime = []
            workload = []
            for i in range(processnum):
                arrivaltime.append(int(self.tableWidget.item(i,1).text()))
                workload.append(int(self.tableWidget.item(i,2).text()))
            output = main.RR(inputInfo,arrivaltime,workload, int(timequantum))
            burstTime, waitingTime, turnaroundTime, normalizedTT, consumedPower, result = output
            print(result)
            header = self.tableWidget_gantt.horizontalHeader()
            for j in range(len(result)):
                self.delay(100)
                item = QTableWidgetItem(str(j))
                self.tableWidget_gantt.setColumnCount(j+2)
                header.resizeSection(j+1,40)
                self.tableWidget_gantt.setHorizontalHeaderItem(j+1,item)
                header.resizeSection(0,100)
                for f1 in range(len(result[j][7])):
                    if int(result[j][7][f1][1]) != -1:
                        item = QTableWidgetItem("P"+str(result[j][7][f1][1]+1))
                        item.setTextAlignment(Qt.AlignCenter)
                        #item.setForeground(QColor(255,255,255))
                        color, textcolor = self.choosecolor(result[j][7][f1][1])
                        item.setForeground(textcolor)
                        item.setBackground(color)
                        self.tableWidget_gantt.setItem(f1,j+1,item)
                self.tableWidget_gantt.horizontalScrollBar().setMaximum(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.tableWidget_gantt.horizontalScrollBar().setValue(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.label_nowtime.setText(str(j))
                self.label_usagewatt.setText(str(result[j][3]))
                #self.tableWidget_gantt.setItemDelegate
                for i in range(len(result[j][6])):
                    result[j][6][i] += 1
                self.label_readyqueue.setText(str(result[j][6]))
                for i in range(processnum):
                    item = QTableWidgetItem(str(result[j][0][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,1,item)
                    item = QTableWidgetItem(str(result[j][1][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,2,item)
                    item = QTableWidgetItem(str(result[j][2][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,3,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(turnaroundTime[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,4,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(normalizedTT[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,5,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem("DONE")
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,6,item)
        elif selected_algo == 2:
            core = pcore + ecore
            generate = main.generateProcessor(core,pcore,ecore)
            inputInfo = (processnum, generate)
            arrivaltime = []
            workload = []
            for i in range(processnum):
                arrivaltime.append(int(self.tableWidget.item(i,1).text()))
                workload.append(int(self.tableWidget.item(i,2).text()))
            output = main.SPN(inputInfo,arrivaltime,workload)
            burstTime, waitingTime, turnaroundTime, normalizedTT, consumedPower, result = output
            print(result)
            header = self.tableWidget_gantt.horizontalHeader()
            for j in range(len(result)):
                self.delay(100)
                item = QTableWidgetItem(str(j))
                self.tableWidget_gantt.setColumnCount(j+2)
                header.resizeSection(j+1,40)
                self.tableWidget_gantt.setHorizontalHeaderItem(j+1,item)
                header.resizeSection(0,100)
                for f1 in range(len(result[j][7])):
                    if int(result[j][7][f1][1]) != -1:
                        item = QTableWidgetItem("P"+str(result[j][7][f1][1]+1))
                        item.setTextAlignment(Qt.AlignCenter)
                        color, textcolor = self.choosecolor(result[j][7][f1][1])
                        item.setForeground(textcolor)
                        item.setBackground(color)
                        self.tableWidget_gantt.setItem(f1,j+1,item)
                self.tableWidget_gantt.horizontalScrollBar().setMaximum(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.tableWidget_gantt.horizontalScrollBar().setValue(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.label_nowtime.setText(str(j))
                self.label_usagewatt.setText(str(result[j][3]))
                #self.tableWidget_gantt.setItemDelegate
                for i in range(len(result[j][6])):
                    result[j][6][i] += 1
                self.label_readyqueue.setText(str(result[j][6]))
                for i in range(processnum):
                    item = QTableWidgetItem(str(result[j][0][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,1,item)
                    item = QTableWidgetItem(str(result[j][1][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,2,item)
                    item = QTableWidgetItem(str(result[j][2][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,3,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(turnaroundTime[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,4,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(normalizedTT[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,5,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem("DONE")
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,6,item)
        elif selected_algo == 3:
            core = pcore + ecore
            generate = main.generateProcessor(core,pcore,ecore)
            inputInfo = (processnum, generate)
            arrivaltime = []
            workload = []
            for i in range(processnum):
                arrivaltime.append(int(self.tableWidget.item(i,1).text()))
                workload.append(int(self.tableWidget.item(i,2).text()))
            output = main.SRTN(inputInfo,arrivaltime,workload)
            burstTime, waitingTime, turnaroundTime, normalizedTT, consumedPower, result = output
            print(result)
            header = self.tableWidget_gantt.horizontalHeader()
            for j in range(len(result)):
                self.delay(100)
                item = QTableWidgetItem(str(j))
                self.tableWidget_gantt.setColumnCount(j+2)
                header.resizeSection(j+1,40)
                self.tableWidget_gantt.setHorizontalHeaderItem(j+1,item)
                header.resizeSection(0,100)
                for f1 in range(len(result[j][7])):
                    if int(result[j][7][f1][1]) != -1:
                        item = QTableWidgetItem("P"+str(result[j][7][f1][1]+1))
                        item.setTextAlignment(Qt.AlignCenter)
                        #item.setForeground(QColor(255,255,255))
                        color, textcolor = self.choosecolor(result[j][7][f1][1])
                        item.setForeground(textcolor)
                        item.setBackground(color)
                        self.tableWidget_gantt.setItem(f1,j+1,item)
                self.tableWidget_gantt.horizontalScrollBar().setMaximum(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.tableWidget_gantt.horizontalScrollBar().setValue(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.label_nowtime.setText(str(j))
                self.label_usagewatt.setText(str(result[j][3]))
                #self.tableWidget_gantt.setItemDelegate
                for i in range(len(result[j][6])):
                    result[j][6][i] += 1
                self.label_readyqueue.setText(str(result[j][6]))
                for i in range(processnum):
                    item = QTableWidgetItem(str(result[j][0][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,1,item)
                    item = QTableWidgetItem(str(result[j][1][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,2,item)
                    item = QTableWidgetItem(str(result[j][2][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,3,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(turnaroundTime[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,4,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(normalizedTT[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,5,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem("DONE")
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,6,item)
        elif selected_algo == 4:
            core = pcore + ecore
            generate = main.generateProcessor(core,pcore,ecore)
            inputInfo = (processnum, generate)
            arrivaltime = []
            workload = []
            for i in range(processnum):
                arrivaltime.append(int(self.tableWidget.item(i,1).text()))
                workload.append(int(self.tableWidget.item(i,2).text()))
            output = main.HRRN(inputInfo,arrivaltime,workload)
            burstTime, waitingTime, turnaroundTime, normalizedTT, consumedPower, result = output
            print(result)
            header = self.tableWidget_gantt.horizontalHeader()
            for j in range(len(result)):
                self.delay(100)
                item = QTableWidgetItem(str(j))
                self.tableWidget_gantt.setColumnCount(j+2)
                header.resizeSection(j+1,40)
                self.tableWidget_gantt.setHorizontalHeaderItem(j+1,item)
                header.resizeSection(0,100)
                for f1 in range(len(result[j][7])):
                    if int(result[j][7][f1][1]) != -1:
                        item = QTableWidgetItem("P"+str(result[j][7][f1][1]+1))
                        item.setTextAlignment(Qt.AlignCenter)
                        #item.setForeground(QColor(255,255,255))
                        color, textcolor = self.choosecolor(result[j][7][f1][1])
                        item.setForeground(textcolor)
                        item.setBackground(color)
                        self.tableWidget_gantt.setItem(f1,j+1,item)
                self.tableWidget_gantt.horizontalScrollBar().setMaximum(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.tableWidget_gantt.horizontalScrollBar().setValue(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.label_nowtime.setText(str(j))
                self.label_usagewatt.setText(str(result[j][3]))
                #self.tableWidget_gantt.setItemDelegate
                for i in range(len(result[j][6])):
                    result[j][6][i] += 1
                self.label_readyqueue.setText(str(result[j][6]))
                for i in range(processnum):
                    item = QTableWidgetItem(str(result[j][0][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,1,item)
                    item = QTableWidgetItem(str(result[j][1][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,2,item)
                    item = QTableWidgetItem(str(result[j][2][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,3,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(turnaroundTime[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,4,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(normalizedTT[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,5,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem("DONE")
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,6,item)
        elif selected_algo == 5:
            core = pcore + ecore
            generate = main.generateProcessor(core,pcore,ecore)
            inputInfo = (processnum, generate)
            arrivaltime = []
            workload = []
            for i in range(processnum):
                arrivaltime.append(int(self.tableWidget.item(i,1).text()))
                workload.append(int(self.tableWidget.item(i,2).text()))
            output = main.RPN(inputInfo,arrivaltime,workload)
            burstTime, waitingTime, turnaroundTime, normalizedTT, consumedPower, result = output
            print(result)
            header = self.tableWidget_gantt.horizontalHeader()
            for j in range(len(result)):
                self.delay(100)
                item = QTableWidgetItem(str(j))
                self.tableWidget_gantt.setColumnCount(j+2)
                header.resizeSection(j+1,40)
                self.tableWidget_gantt.setHorizontalHeaderItem(j+1,item)
                header.resizeSection(0,100)
                for f1 in range(len(result[j][7])):
                    if int(result[j][7][f1][1]) != -1:
                        item = QTableWidgetItem("P"+str(result[j][7][f1][1]+1))
                        item.setTextAlignment(Qt.AlignCenter)
                        #item.setForeground(QColor(255,255,255))
                        color, textcolor = self.choosecolor(result[j][7][f1][1])
                        item.setForeground(textcolor)
                        item.setBackground(color)
                        self.tableWidget_gantt.setItem(f1,j+1,item)
                self.tableWidget_gantt.horizontalScrollBar().setMaximum(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.tableWidget_gantt.horizontalScrollBar().setValue(self.tableWidget_gantt.horizontalScrollBar().maximum())
                self.label_nowtime.setText(str(j))
                self.label_usagewatt.setText(str(result[j][3]))
                #self.tableWidget_gantt.setItemDelegate
                for i in range(len(result[j][6])):
                    result[j][6][i] += 1
                self.label_readyqueue.setText(str(result[j][6]))
                for i in range(processnum):
                    item = QTableWidgetItem(str(result[j][0][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,1,item)
                    item = QTableWidgetItem(str(result[j][1][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,2,item)
                    item = QTableWidgetItem(str(result[j][2][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_result.setItem(i,3,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(turnaroundTime[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,4,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem(str(normalizedTT[i]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,5,item)
                    if result[j][4][i] == True:
                        item = QTableWidgetItem("DONE")
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_result.setItem(i,6,item)
            
if __name__ == "__main__":
    global pcore, ecore, processnum
    pcore, ecore, processnum = 0,0,0
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.show()
    sys.exit(app.exec_())
